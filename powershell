comments in powershell are # same as normal
a multi line comment starts with <# and ends with #>

a hearstring is a block of code that starts with @' and ends with '@, useful for running group of commands as a variable

home and end buttons take you to the start and end of the line, ctrl+ arrow key to go word by word on a line
docs.microsoft.com most helpful for looking up commands online
________________________________________________

get-executionpolicy to find execution policy on device, most of the time will be restrcited so as to not delete c:\

set-execution policy 
Set-ExecutionPolicy -ExecutionPolicy Restricted -scope CurrentUser


update-"command" to update that command to the newest available according to the microsoft database
update-help -force -erroraction silentlycontinue to update our help pages without showing errors 

when using get-help if you see square brackets those are values you can set yourself, 
squigly braces means options for the command itself, (ie, for get-help set-executionpolicy the options are bypass, default, remote signed etc cetera
anything in <> is a string you can add to the cmdlet

to find examples of cmdlets or code use -examples option 
to bring up a help file on machine use -showwindow option but -online is better because most times showwindow will be outof date

get-help *tasks*
get-help task


get-command -verb or -noun or -name

helpfiles start with about_ in powershell (ie, get-help about_)


first positional parameter is -path in get-childitem 
common parameter like -name look at the object and try to get that attribute so for a parameter -name it will look at the text in -name because every object in powershell has a name


Get-ChildItem -path C:\ -filter *.evil -Recurse -Name (looks through the C directory to find all files ending in .evil recursively)
get-childitem alias:ls (finds alias for that specific command or alias entered, for us ls stands for get-childitem)
when looking at stackoverflow if a variable or thing does not make sense run get-alias "command" to find the alias
most powershell programmers are good with aliases and you arent dumbass

to create alias do New-Alias -name "dora" -value explorter.exe

new-alias -name honse -value 'Invoke-webRequest 0.4.7.7:6000:trojan.tj'
set-alias -name honse -value 'Invoke-webRequest 0.4.7.7:6000:trojan.tj' using set-alias allows for you to overwrite existing aliases where as new-alias would error out if it recognizes a previous alias was using what we wanted

to make an alias permanent we need to go to $profile (our powershell profile) 
add-content -path $profile.allusersallhosts -value "set-alias -name cat -value format-drive" 



VARIABLES
___________________________________________________________________________________________________________


$money = 'all of it' = declaration

$money = call

output = all of it

$money.GetType() = string

$somenumbs = 40
$somenumbs.GetType() = int32

typecasting

([somnumbs]$somenumbs).GetType() = somenumbs is now a string for right now
[float]
[byte]
[char]
[int]
[datetime]2022/xx/xx

$$ = last token
$! = execution status of last command, True == successful False == unsuccessful execution
$_ = current object in current pipeline
$args = array of arguments passed undeclared parameters
$input = enumeration of all parameter passed to a function
$null = variable of nothing
$true = is this true 
$false = is this false
$profile = path to the powershell profiles



$services = $(Get-Service)
get-childitem variable:* or variable:name
get-childitem $env:


ARRAYS
_________________________________________________________
how to declare arrays in powershell
$array = @()
[array]$another_array = $null
$number_array = 1,2,3,4,5,6,7,8,9
$sequential_array = 1..9


finding object by index in array
$array[10] = finds object at 10th index in array $array

jagged array = array with another array in it
$nested = @,!,$array,#

Human Views as
@,
!,
1,2,3
#
$nested[2][1] = 2

string arrays is array of strings
polymorphic strings are arrays that contain multiple types of data like strings and integers and floats

.count is a valid method for arrays
$array[($array.length-1)..1] to reverse an array


HASH TABLES AND PS PROVIDERS
__________________________________________________________________________________________________________________

hash tables are similar to arrays but hold key value pairs, ie a dicitonary in python
how to create hash table ----> $hashtable = @{}

$ord_hash = [ordered]@{} to create a hashtable ordered the way we want

$ord_hash = [ordered]@{videogame="fortnite" ; IsTrash="yah" ; rating="1" ; working="$False"}

$ord_hash.keys
$ord_hash.values
$ord_hash[$ord_hash.keys]
$ord_hash["videogame", "IsTrash"]
$ord_hash.playerbase="preteens" to add a new keyvalue pair to ordered hash
to add a new keyvalue pair ---->$ord_hash.add("streamer" ; "hope not")

to change a value in a orderedhash use same syntax as adding a new keyvalue pair but with the key of the one you want and the text as replacing value


PS PROVIDERS = how to store and interact with an object
get-psprovider
get-psdrive

POWERSHELL PIPELINE
______________________________________________________________________________________________________________________
output of a powerhsell cmdlet is an object and input for next cmdlet is an object
objects have properties and methods

get-service | get-member -----> to get methods and properties
get-command -verb format

format-table, format-wide, format-custom, format-list are options to make outputs more readable

get-service | format-list to make a list of everthing to make it easier to read
get-service | sort-object -property status to sort services by running or stopped and not alphabetically 
get-service | group-object -property status to find number of processes stopped and number of processes running
get-service | Where-Object {$_.status -eq "running"} ------> shows all processes running at time
get-service | Where-Object {$_.Status -eq 'running'} |Select-Object -first 10 ------> to find first 10 services that are running
get-childitem | measure-object -----> to find number of objects in current directory, use -path to specify another directory
(get-service spooler).status
^^^^^^ can use dot notation to reference objects and methods
in this instance we want the status of the spooler service


use get-member to find properties you can sort on VERY IMPORTANT
when using sort, sorting integers will be done numerically, if sorting strings it will be done by ascii


'what is the answer to life, the universe and everthing?' > test.txt
$before = Get-ChildItem

'42' > test.txt
$after = Get-ChildItem

compare-object $before $after -Property length, name

1,2,3,2,3,1,3,2,1 | sort-object | get-unique
will output 1,2,3 

important to sort first 



DIFFERENCE BETWEEN WRITE-HOST and WRITE-OUTPUT
write-host is just writing to screen and not allowing for more input 
write-ouput allows for whatever is being written to be changed and formatted to however we would like

MAKING OBJECTS IN POWERSHELL
_________________________________________________________________________________________________

$acar= New-Object Object
Add-Member -MemberType NoteProperty -name color -value Blue -InputObject $acar
Add-Member -Me NoteProperty -in $acar -name make -value mazda 
Add-Member -InputObject $acar noteproperty Model "RX-8" 
$acar | Add-Member noteproperty cab "8-door express van" 
Add-Member -InputObject $acar ScriptMethod Explode {"my apex seals..."}
Add-Member -InputObject $acar ScriptMethod BurnOil {"are doritos supposed to taste like this"}
Add-Member -InputObject $acar ScriptMethod Putters {"hit that granny"}

COMPARISON OPERATORS
-eq Equals
-ne Not Equal
-gt Greater Than
-lt Less Than
-ge Greater Than or Equal To
-le Less Than or Equal To
-contains Contains (used for a collection of items)
-match Matches anywhere in the string
-like Both sides of expression are identical
-in Returns true when value is contained within a collection
-replace Replaces a string pattern
-is Returns true if both objects are the same type

"abc" -eq "def"
returns true
"abc" -ne "def"
returns true

Want most specific variable or string on right side of operator otherwise powershell logic will screw up

LIKE
"inky" -like "*" ----> true
"Blinky" -like "Bl?nky" ----> true
"Pinky" -like "[L-Q]inky" ----> true
"Clyde -like [A-C]lyde" ---> true

NOT LIKE
"inky" -notlike "*" ----> true
"Blinky" -notlike "Bl?nky" ----> true
"Pinky" -notlike "[A-F]inky" ----> true
"Clyde -notlike [DEF]lyde" ---> true

MATCH

$text = "Your acount username is ACE4495"
$pattern = '([A-F]{3})(\d{4})'
$text -match $pattern

CONTAINS
$ghosts = 'inky', 'blinky', 'pinky', 'clyde'
$ghosts -contains 'blinky'

AND/OR
(($num -gt 1) -and(or) ($num -lt 10))
true

FIND A SPECIFIC NAMED PROCESS 
Get-Process | Where-Object {$_.name -like 'power*'} ---> to find powershell from get-process

LOOPS

switch(10)
{
  (1+9) {
    "congrats you did adds right"
      }
  (1+10) {
    "This be wrong"
      }
  (1+11) {
    "Dummy"
      }
}

2 MULTIPLE VALUES
$num = (get-random -minimum 0 -maximum 10)
switch($num) {
  
  
DEFAULTS IN SWITCHES
$val = "meg"
Switch($val) {
  peter { "Thats the father" }
  lois { "Thats the mother" }
  stewie { "That's the youngest child" }
  chris { "Thats the oldest child" }
  default { "Nobody cares about you $val" }
}

$line1 = "Do you have model number: MT5437 for john.doe@sharklasers.com?"
$line2 = "What model number for john.doe@sharklasers.com?"
$pattern = '([A-Z]{2})(\d{4})'

if ($line1 -match $pattern)
 {
    echo $matches[0]
 }
elseif ($line2 -match $pattern)
 {
    echo $matches[0]
 }
else {
    echo "No model number found"
 }
WORKING ELSEIF STATEMENT  TO FIND MODEL NUMBER

WHILE LOOP

while(condition) {
  code to be executed
  n++
}

DO AT LEAST ONCE WHILE LOOP
$num = 3
while ($num -lt 3) {
$num
$num++
}
do {
    $num
    $num++
}while($num -lt 3)
$num

DO WHILE STATEMENT

do {
    $num
    $num++
}until($num -lt 3)
$num

FOR LOOPS

for (initialization; condition; increment) {
  code block
}
for ($num = 10; $num -le 20; $num++){$num}

for ($i = 0; $i -le 255; $i++) {
  write-host 192.168.0.$i
}

FOR EACH LOOP
foreach(variable in expression) {
  code block
}
foreach($item in Get-Childitem C:\ -Recurse) {
  $item.name
}

FOREACH OBJECT LOOP
Get-Childitem C:\ -Recurse | foreach-object {$_.name}

USING BREAK OR CONTINUE IN A LOOP
$num = 0
while($num -lt 10) {
  $num += 1
  if($num -eq 5) {
    break(OR CONTINUE)
  }
  $num
}
READING AND WRITING TO FILES

get-content to read from 

set-content to write to files

add-content to append to files

Set-Content -path .\example.txt -value "Amogus Amogus Amogus Amogus Amogus"
Get-Content .\example.txt
Add-Content -path .\example.txt -value "word for word bar for bar"

TO DECLARE A FUNCTION:
function <function name> { <function code goes here> }
ex: function Hello-World { 'Hello World!' }
to call on a function just say the name of the function

>Hello-World
>Hello World!                           

to list all functions: gci function:*
to see what any given function does:
Get-content function:<name of function>
function <function name> (<$parameter name>) { <function code goes here> }

function basic-parameter ($value) {
is ($value) {
      write-host "The parameter is $value -For
      
function <function name> ($parameter1, parameter2) {function code}

function Many-Params ($value1, $value2) {
if ($value1 -gt $value2){
  Write-host "$value1" -Foreground Green -NoNewline
  Write-host "is e
  
  
$parameter1='<default val,$paramter2='<default value>'

switch parameters are boolean in nanture

if ($switchPro) 

whenever we assign a default value to a Parameter, if the parameter is never given when the function gets called, then the default value gets assigned. 
However, if you do provide and argument to the parameter, 
then the parameter gets overwritten by that argument's value.
function Default-Params {
  param(
    $parameter1='90', $parameter2='65535'
    )
 }
 
a switch parameter is a boolean, it is either active or not (true or false) 

function Nintendo {
  param(
  [switch]
  $switchpro
)
if 9$switchpro) { 
  Write-Host " Switch is activated"
  Write-Host " Switchpro research initiated"
}
else {
  Write-Host "Switch is off"
  Write-Host "Switchpro never coming"
  }
}
MANDO PARAMETERS
function Mando-Params {
    param(
        [Parameter(Mandatory=$true)]
        $param
    )

while ([string]::IsNullOrWhiteSpace($param)) {
    $param= read-host -prompt "enter a string"
    }
    "The argument $param was mandotory for the parameter" 
    }
    Mando-Params
    
    
 MAKING PARAMETERS WITH HELP MESSAGES
 
 function Help-Params {
    param(
    [Parameter(Mandatory=$true, HelpMessage='Enter an integer')]
    [Int]$param
    )
    while (-not $param) {
        $param = Read-Host -Prompt "Enter a string"
        }
    "The argument $param was mandatory for the parameter"
    }
    Help-Params
    
  MAKING POSITIONAL PARAMETERS
  
  Positional




$_, $input, $args automatic variables 

``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
ACTIVITIES
ACTIVITY 1
1) update-help -force -erroraction silentlycontinue
2) get-process, start stop debug wait remove set new,
3) get-service getwmiobject, getciminstance
4) write-host or echo, write-output, write-warning, write-progress
5) set-variable, get-variable get-childitem variable:* clear-variable, remove-variable
6) get-command
7) read-host

ACTIVITY 2
1) get-process or ps, get-ciminstancem, get-wmiobject
2) get-process -name s*
3) get-alias gal,dir,echo,?,%,ft
4) get-netfirewallrule
5) set-alias -name gh -value "Get-Help"

ACTIVITY 3
1) $var11 = (get-random -maximum 50 -minimum 25)
2) $var22 = (get-random -maximum 10 -minimum 1)
3) $sum = ($var11 + $var22)
4) $sub = ($var11 - $var22)
5) $prod = ($var11 * $var22)
6) $quo = ($var11 / $var22)
7) write-host "$var11" + "$var22" = "$sum1"
8) write-host "$var11" - "$var22" = "$sub1"
9) write-host "$var11" * "$var22" = "$prod1"
10)write-host "$var11" / "$var22" = "$quo1"

ACTIVITY 4
Create an array containing a range with a random starting and stopping point.  The starting point will be a random number from -10 through 0.
The ending point will be a random number from 1 through 20.

$ARRAY = (get-random -minimum -10 -maximum 0)..(get-random -Minimum 1 -Maximum 20)
$reverse = $array[($array.length-1)..0] 


ACTIVITY 5

Create two empty hash tables with the following names:
employee1
employee2
Using the following table of key-value pairs, apply each key-value to the empty hash tables.

$employee1 = [ordered]@{ first="Mary" ; last="Hopper" ; id="001" ; job="Software Developer"}
$employee2 = [ordered]@{ first="John" ; last="Williams" ; id="002" ; job="Web Developer"}
$employee3 = [ordered]@{ first="Alex" ; last="Moran" ; id="003" ; job="Software Developer" ; username="amoran003"}

ACTIVITY 6

Display the start time of the earliest and latest running processes
get-process | where-object {$_.Starttime} | measure-object -property starttime -minimum -maximum | select-object -property minimum, maximum

Identify a cmdlet that returns the current date and time then using this cmdlet and Select-object, display only the current day of the week
get-date | select-object DayofWeek

Identify a cmdlet that displays a list of installed hotfixes.
get-hotfix

Extend the expression to sort the list by install date, and display only the install date and hotfix ID.
Get-HotFix | Sort-Object -Property InstalledOn | Select-Object HotFixID, InstalledOn

Extend the expression further, but this time sort by description, include description, hotfix ID, and install Date.
Get-HotFix | Sort-Object description | Select-Object description, HotFixID, InstalledOn

ACTIVITY 7

Create a custom object that contains information about the host system using the following:

Win32_ComputerSystem
Win32_BIOS
Win32_OperatingSystem
Win32_LogicalDisk

$customobject = New-Object Object
Add-Member -MemberType NoteProperty -name Version -value (Get-WmiObject Win32_OperatingSystem).version -InputObject $customobject
Add-Member -MemberType NoteProperty -name OperatingSystem -value (Get-WmiObject Win32_operatingsystem).caption -InputObject $customobject
Add-Member -MemberType NoteProperty -name Manufacturer -value (Get-WmiObject Win32_BIOS).manufacturer -InputObject $customobject
Add-Member -MemberType NoteProperty -name Disks -Value (get-wmiobject Win32_LogicalDisk) -InputObject $customobject
Add-Member -MemberType NoteProperty -name ComputerName -value (Get-WmiObject Win32_ComputerSystem).name -InputObject $customobject

$customobject | format-list

ACTIVITY 8
Find and extract the model number from the provided lines of text. If there isn’t a model number then display to the user that a model number wasn’t found
Check both lines for model numbers and report individually the line and model number if found.

$line1 = "Do you have model number: MT5437 for john.doe@sharklasers.com?"
$line2 = "What model number for john.doe@sharklasers.com?"
$pattern = '([A-Z]{2})(\d{4})'

if ($line1 -match $pattern)
 {
    echo $matches[0]
 }
elseif ($line2 -match $pattern)
 {
    echo $matches[0]
 }
else {
    echo "No model number found"
 }
WORKING ELSEIF STATEMENT  TO FIND MODEL NUMBER

switch($pattern){
  { $line -match $_ } {
    $model = $matches[0]
    "The model number is $model and it's on line 1" }
  { $line2 -match $_ } {
    $model = $matches[0]
    "Yes model number is $model and it's on line 2" }
  { $line1 -nomatch $_ } {
    "There is no model number on line1"
  {$line2 -nomatch $_ } {
    "There is no match on line2" }
WORKING SWITCH STATEMENT TO FIND MODEL NUMBERS

ACTIVITY 9

ACTIVITY: Looping & Iteration
Part 1
Use an array to iterate and open the following
Notepad
MS Edge
MSpaint
Query the processes
Kill the processes from PowerShell
$procs = "notepad", "msedge", "mspaint"
$procs | foreach-object { Start-Process $_ }
get-process
$procs | foreach-object { Stop-Process $_ }

Part 2
Use an array to iterate and open the following
Notepad
MS Edge
MSpaint
Query the processes
Save the ProcessIDs to a text file called procs.txt
Iterate through the ProcessIDs in the text file and kill them

$file = "$pwd\procs.txt"
foreach($proc in $procs) {
  get-process | where-object {$_.name -like $proc} | foreach-object {add-content $file $_.id} }
  

Part 3
Use an array to iterate and open the following
Notepad
MS Edge
MSpaint

Query the processes and display only the following information in order by process ID
Process ID
Process Name
The time the process started
The amount of time the process has spent on the processor
The amount of memory assigned to the process



$procs = "notepad", "msedge", "mspaint"
$procs | foreach-object { Start-Process $_ }
get-process 
$procs | foreach-object { Stop-Process $_ }
$file = "$pwd\procs.txt"
foreach($proc in $procs) {
get-process | where-object {$_.name -like $proc} | foreach-object {add-content $file $_.id} }
Get-content .\procs.txt | foreach-object{stop-process $_}
foreach($proc in $procs){
  get-process | where-object {$_.name -like $proc} | `
  format-table -property id, name, starttime, totalprocessortime, `
  virtualmemorysize, workingset64 }

ACTIVITY 10
PART1 Write a function that returns the Ordinal date of the current date.

$jan1 = Get-Date 1/1
$today = Get-Date
($today - $jan1).days
$julian = ($today - $jan1).days
$julian.ToString("000")

function retrieve-ordinaldate {
  $day=9get-date).dayofyear
  $year=(get-date).year
  write-host "$year-$day"

PART2 Create a function that takes a number(n) as an argument and returns the square(n^2) of the number.

function Get-Square([int]$value)
{
    $result = $value * $value
    return $result
}

$value = Read-Host 'Enter a value'
$result = Get-Square $value
Write-Output "$value * $value = $result"

function number-squared([int]$number) {
  $number * $number
}

PART3 Create a function that takes three (3) arguments and returns the product of the arguments.
$arg1 = [int](Read-Host)
$arg2 = [int](Read-Host)
$arg3 = [int](Read-Host)
$arguments = ($arg1 * $arg2 * $arg3)
$arguments 

ACTIVITY 11
PART 1
function find-hypo($a, $b) {
  $c2 = ($a * $a) + ($b * $b)
  [math]::sqrt($c2)
  }

FIND A HYPOTENSUE WHEN GIVEN TWO INTEGER VALUES
PART 2
function get-anlge($a,$b) {
  $angle = 180 ($a + $b)
  write-host $angle

FIND AN ANGLE TO FIND IF ITS A REAL TRIANGLE OR NOT
PART 3
function display-persinfo {
  param (
    [Parameter(Mandatory=$true, position=0, helpmessage="Type in your first name")]
      [string]$name
    [Parameter(Mandatory=$true, position=0, helpmessage="Type in your first name")]
      [string]$last
    [Parameter(Mandatory=$true, position=0, helpmessage="Type in your first name")]
      [string]$name
    [Parameter(Mandatory=$true, position=0, helpmessage="Type in your first name")]
      [string]$name
      
      
Create a function that takes the following as mandatory parameters:

First Name
Last Name
Age
Weight in pounds(lbs)



PRACTICE TEST

QUESTION 1 

function q1($var1,$var2,$var3,$var4) {
    <# Return the product of the arguments #>
    $answer = $var1 * $var2 * $var3 * $var4
    write-output $answer
}


QUESTION 2 

function q2($arr,$rows,$cols,$key) {
    <# Search the 2 dimensional array for the first occurance of key at column index 0
       and return the value at column index 9 of the same row.
       Return -1 if the key is not found.
    #>

    foreach ($whatever in $arr) {
        if ($whatever[0] -eq $key) {
            return $whatever[9]
            }
        }
        return -1
}


QUESTION 3 

function q3 {
    <# In a loop, prompt the user to enter positive integers one at time.
       Stop when the user enters a -1. Return the maximum positive
       value that was entered."
	#>
    
    $num = 0 
    $high = 0
    while($num -ne -1) {
        [int]$num = read-host -prompt "put in a positive number"
        if ($num -gt $high) {
            $high = $num 
        }
    }
    return $high 
}


QUESTION 4 

function q4($filename,$whichline) {
    <# Return the line of text from the file given by the `$filename
	   argument that corresponds to the line number given by `$whichline.
	   The first line in the file corresponds to line number 0."
	#>
    
    $read = get-content $filename
    $read[$whichline]
}


QUESTION 5 

function q5($path) {
    <# Return the child items from the given path sorted
       ascending by their Name
	#>
    Get-ChildItem $path -name | sort-object -property name 
}


QUESTION 6 

function q6 {
    <# Return the sum of all elements provided on the pipeline
	#>
        $sum = 0
        foreach ($element in $input) {
        $sum += $element}
        return $sum
}


QUESTION 7 

function q7 {
	<# Return only those commands whose noun is process #>
    get-command -noun process
}


QUESTION 8

function q8($adjective) {
    <# Return the string 'PowerShell is ' followed by the adjective given
	   by the `$adjective argument
	#>    
    return "Powershell is $adjective" 
}


QUESTION 9 

function q9($addr) {
	<# Return `$true when the given argument is a valid IPv4 address,
	   otherwise return `$false. For the purpose of this function, regard
	   addresses where all octets are in the range 0-255 inclusive to
	   be valid.
	#>

    $pattern = '\b((25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)(\.|$)){4}\b'

    if ($addr -match $pattern){
        write-output $true}
    else {
        write-output $false}
    }
    
    
              OR
              
function q9($addr) { 

    if ($addr -as [IPAddress]) {
      return $true}
    else {
      return $false}
}    
    
    
QUESTION 10

function q10 ($filepath,$lasthash) {
    <# Return `$true if the contents of the file given in the
       `$filepath argument have changed since `$lasthash was
       computed. `$lasthash is the previously computed SHA256
       hash (as a string) of the contents of the file. #>

        $hashes = get-filehash $filepath | select-object -expandproperty hash
        
        if ($hashes -ne $lasthash){
            write-output $true}
        else{
            write-output $false}
}

REVIEW  

          
Get all lines that start with a specific word:
    
   
    $content = get-content .\<filename>
      foreach ($line in $content) {
          if ($line.startswith("It's")) {
              write-host $line
            }
        }
        
        
        OPTION TWO:        
        
          $content = get-content .\<filename>
    $count = 0
    foreach ($line in $content) {
    *** To find and replace use $line.replace("<string to replace>", "<replacement>") ***
        write-host $count -nonewline; write-host "-"$line; $count ++ 
    }
    
Join an array of words:

    $words = "<list of words>"
    $words -join ("-")

          OR

    $words -join ("--word: ")



Take input from a user and continue to ask for input until they enter an empty string:

    Do {
    
        $user_input= read-host
        if (user_input.length -ne 0) {
            $values += $user_input
        }
        
        
    } until ($user_input.lenght -eq 0)
    
    ($values | sort -property length -descending)[0]
    *** to return the largest value entered ***
    
    
To filter on a property use where-object:
    
    Whenever you select-object, it will ONLY select that property and nothing else will be output
    Where-object acts as a filter and will pass the ENTIRE object and ALL its properties to the output
    
    get-process | select name | select * -first 1
    
    both do the exact same thing:
    get-process | where -property name -like "*" | select * -first 1 
    get-process | select * | where {$_.name -like "*"} | select -first 1

    
    get-process | select * | where { ($_.name).startswith("power") }
                                              *** or use .endswith() ***
    
for determining if something is null or empty
    ($user_input.length -eq 0)
    [string]::isnullorempty($user_input)
    [string]::isnullorwhitespace($user_input)
