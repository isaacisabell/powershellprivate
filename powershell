comments in powershell are # same as normal
a multi line comment starts with <# and ends with #>

a hearstring is a block of code that starts with @' and ends with '@, useful for running group of commands as a variable

home and end buttons take you to the start and end of the line, ctrl+ arrow key to go word by word on a line
docs.microsoft.com most helpful for looking up commands online
________________________________________________

get-executionpolicy to find execution policy on device, most of the time will be restrcited so as to not delete c:\

set-execution policy 
Set-ExecutionPolicy -ExecutionPolicy Restricted -scope CurrentUser


update-"command" to update that command to the newest available according to the microsoft database
update-help -force -erroraction silentlycontinue to update our help pages without showing errors 

when using get-help if you see square brackets those are values you can set yourself, 
squigly braces means options for the command itself, (ie, for get-help set-executionpolicy the options are bypass, default, remote signed etc cetera
anything in <> is a string you can add to the cmdlet

to find examples of cmdlets or code use -examples option 
to bring up a help file on machine use -showwindow option but -online is better because most times showwindow will be outof date

get-help *tasks*
get-help task


get-command -verb or -noun or -name

helpfiles start with about_ in powershell (ie, get-help about_)


first positional parameter is -path in get-childitem 
common parameter like -name look at the object and try to get that attribute so for a parameter -name it will look at the text in -name because every object in powershell has a name


Get-ChildItem -path C:\ -filter *.evil -Recurse -Name (looks through the C directory to find all files ending in .evil recursively)
get-childitem alias:ls (finds alias for that specific command or alias entered, for us ls stands for get-childitem)
when looking at stackoverflow if a variable or thing does not make sense run get-alias "command" to find the alias
most powershell programmers are good with aliases and you arent dumbass

to create alias do New-Alias -name "dora" -value explorter.exe

new-alias -name honse -value 'Invoke-webRequest 0.4.7.7:6000:trojan.tj'
set-alias -name honse -value 'Invoke-webRequest 0.4.7.7:6000:trojan.tj' using set-alias allows for you to overwrite existing aliases where as new-alias would error out if it recognizes a previous alias was using what we wanted

to make an alias permanent we need to go to $profile (our powershell profile) 
add-content -path $profile.allusersallhosts -value "set-alias -name cat -value format-drive" 



VARIABLES
___________________________________________________________________________________________________________


$money = 'all of it' = declaration

$money = call

output = all of it

$money.GetType() = string

$somenumbs = 40
$somenumbs.GetType() = int32

typecasting

([somnumbs]$somenumbs).GetType() = somenumbs is now a string for right now
[float]
[byte]
[char]
[int]
[datetime]2022/xx/xx

$$ = last token
$! = execution status of last command, True == successful False == unsuccessful execution
$_ = current object in current pipeline
$args = array of arguments passed undeclared parameters
$input = enumeration of all parameter passed to a function
$null = variable of nothing
$true = is this true 
$false = is this false
$profile = path to the powershell profiles



$services = $(Get-Service)
get-childitem variable:* or variable:name
get-childitem $env:


ARRAYS
_________________________________________________________
how to declare arrays in powershell
$array = @()
[array]$another_array = $null
$number_array = 1,2,3,4,5,6,7,8,9
$sequential_array = 1..9


finding object by index in array
$array[10] = finds object at 10th index in array $array

jagged array = array with another array in it
$nested = @,!,$array,#

Human Views as
@,
!,
1,2,3
#
$nested[2][1] = 2

string arrays is array of strings
polymorphic strings are arrays that contain multiple types of data like strings and integers and floats

.count is a valid method for arrays
$array[($array.length-1)..1] to reverse an array


HASH TABLES AND PS PROVIDERS
__________________________________________________________________________________________________________________

hash tables are similar to arrays but hold key value pairs, ie a dicitonary in python
how to create hash table ----> $hashtable = @{}

$ord_hash = [ordered]@{} to create a hashtable ordered the way we want

$ord_hash = [ordered]@{videogame="fortnite" ; IsTrash="yah" ; rating="1" ; working="$False"}

$ord_hash.keys
$ord_hash.values
$ord_hash[$ord_hash.keys]
$ord_hash["videogame", "IsTrash"]
$ord_hash.playerbase="preteens" to add a new keyvalue pair to ordered hash
$ord_hash.add("streamer" ; "hope not")

to change a value in a orderedhash use same syntax as adding a new keyvalue pair but with the key of the one you want and the text as replacing value

PS PROVIDERS = how to store and interact with an object
get-psprovider
get-psdrive



``````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
ACTIVITIES
ACTIVITY 1
1) update-help -force -erroraction silentlycontinue
2) get-process, start stop debug wait remove set new,
3) get-service getwmiobject, getciminstance
4) write-host or echo, write-output, write-warning, write-progress
5) set-variable, get-variable get-childitem variable:* clear-variable, remove-variable
6) get-command
7) read-host

ACTIVITY 2
1) get-process or ps, get-ciminstancem, get-wmiobject
2) get-process -name s*
3) get-alias gal,dir,echo,?,%,ft
4) get-netfirewallrule
5) set-alias -name gh -value "Get-Help"

ACTIVITY 3
1) $var11 = (get-random -maximum 50 -minimum 25)
2) $var22 = (get-random -maximum 10 -minimum 1)
3) $sum = ($var11 + $var22)
4) $sub = ($var11 - $var22)
5) $prod = ($var11 * $var22)
6) $quo = ($var11 / $var22)
7) write-host "$var11" + "$var22" = "$sum1"
8) write-host "$var11" - "$var22" = "$sub1"
9) write-host "$var11" * "$var22" = "$prod1"
10)write-host "$var11" / "$var22" = "$quo1"

ACTIVITY 4
Create an array containing a range with a random starting and stopping point.  The starting point will be a random number from -10 through 0.
The ending point will be a random number from 1 through 20.

$ARRAY = (get-random -minimum -10 -maximum 0)..(get-random -Minimum 1 -Maximum 20)
$reverse = $array[($array.length-1)..0] 




